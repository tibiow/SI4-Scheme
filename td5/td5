;; Spécificités DrScheme (plus nécessaire dans les versions récentes)
(require mzlib/defmacro)

;; Un macro-expand qui correspond à celui du cours
(define-macro (macro-expand m)
  `(syntax-object->datum (expand-once ,m)))

;; Un macro-expand "récursif"
(define-macro (macro-expand* m)
  `(syntax-object->datum (expand-to-top-form ,m)))

;; Une fonction pretty-print (avec largeur optionnelle)
(define (pp form . width)
  (pretty-print-columns (if (null? width) 30 (car width)))
  (pretty-print form))

(define-macro (when cond . body)
  `(if ,cond (begin ,@body)))

(define créer-accumulateur
  (let ((c 0))
    (λ(n)
      (set! c (+ c n)) c)))

(define a (λ(n) (créer-accumulateur n)))











(define (fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))


(define memo
  (let ((i '()))
    (λ(f)
      (λ(n)
        (if
        (set! c (f n)) c)))))


   
(define mfib (memo fib))


(define l '(a b c))


(define-macro (prog1 premier . suite)
  `(let ((tmp ,premier))
         ,@suite
         tmp))
               

               
(prog1 (car l) (set! l (cdr l)))

;ex 5



(define-macro (while cond . suite)
  `(letrec ((function (λ ()
                        (when ,cond
                          ,@suite
                          (function)))))
  (function)))

(define i 0)

(while (< i 100) (print i) (set! i (+ i 1)))

;ex6