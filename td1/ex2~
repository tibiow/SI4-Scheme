(define fact
  (lambda(x)
    (if (= x 1)
        1
        (* x (fact(- x 1))))))



(define somme-carres
  (lambda(n)
    (if (= n 1)
        1
        (+ (* n n) (somme-carres(- n 1))))))

(define somme-cubes
  (lambda(n)
    (if (= n 1)
        1
        (+ (* n n n) (somme-cubes(- n 1))))))

(define sigma
  (lambda(n f)
    (if (= n 1)
        1
        (+ (f n) (sigma(- n 1) f)))))

(define carre (lambda (n) (* n n)))

(define derive
  (lambda(f)
    (lambda(x dx)
    (/ (- (f (+ x dx)) (f x)) dx))))

(define derive2
  (lambda(f dx)
    (lambda(x)
    (/ (- (f (+ x dx)) (f x)) dx))))

(define d-carre (derive carre))

(d-carre 3 0.001)

(define d-carre2 (derive2 carre 0.001))

(d-carre2 3)


(define sigma2
  (lambda(f)
    (lambda(n)
      (if (= n 1)
      (f 1)
      (+ (f n) (f (- n 1)))))))

(define lafonction (sigma2 carre))

(lafonction 4)